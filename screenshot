#!/usr/bin/env python2

# This file is part of GtkGrab.
#
# GtkGrab is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# GtkGrab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GtkGrab.  If not, see <http://www.gnu.org/licenses/>.
#
# @category   GtkGrab
# @license    http://www.gnu.org/licenses/gpl-3.0.txt GPL
# @copyright  Copyright 2010-2013 Evan Coury (http://www.Evan.pro/)
# @copyright  Copyright 2010-2013 Pieter Kokx (http://kokx.nl/)
# @package    Client

import ConfigParser, sys, urllib2, os, base64, hashlib, pyperclip, time

config = ConfigParser.ConfigParser()
config.readfp(open(os.path.dirname(__file__) + '/config.cfg'))

configSection = 'GtkGrab'
if len(sys.argv) > 1 and sys.argv[1] != 'gif':
    configSection = sys.argv[1]

user = config.get(configSection,'username')
token = config.get(configSection,'password')
postURL = config.get(configSection,'posturl')
notifyCommand = config.get(configSection,'notifyCommand')
path = config.get(configSection,'capPath')

# determine command to run
command = config.get(configSection,'command')
if len(sys.argv) > 1 and sys.argv[1] == 'gif':
    command = os.path.dirname(__file__) + '/' + config.get(configSection,'gifCommand')
if len(sys.argv) > 2 and sys.argv[2] == 'gif':
    command = os.path.dirname(__file__) + '/' + config.get(configSection,'gifCommand')


# Delete cap file if it currently exists
if os.path.exists(path) == True:
    os.remove(path)

# Perform capture
returnval = os.system(command.replace("%s", path))

if returnval != 0 or os.path.exists(path) == False:
    # no cap file created
    # os.system(notifyCommand.replace('%s', "Cancelled"))
    sys.exit(1)


# if convertCommand:
#     os.system(convertCommand.replace("%s", path))


if postURL == 's3':
    bucket = config.get(configSection, 's3bucket')
    prefix = config.get(configSection, 's3prefix')
    filename = hashlib.sha1()
    filename.update(str(time.time()))
    filename = filename.hexdigest()
    s3Url = "s3://" + bucket + "/" + prefix + "/" + filename + ".png"
    uploadCommand = "s3cmd ";
    if (os.path.exists('.s3cfg')):
        uploadCommand += "-c .s3cfg "
    uploadCommand += "put " + path + " " + s3Url + " --acl-public"
    os.system(uploadCommand)
    url = "http://"+bucket+".s3.amazonaws.com/caps/"+filename+".png"
else:
    # encode the screenshot with base64
    data = base64.b64encode(open(path, 'r').read())
    # hash the data with the user's secret token and send that as header
    hash = hashlib.sha1()
    hash.update(data)
    hash.update(token)
    headers = {'X-Username': user, 'X-Signature': hash.hexdigest(), 'Content-Type': 'text/xml'}
    # upload the url and give the screenshot url to the user
    url = urllib2.urlopen(urllib2.Request(postURL, data, headers)).read()

# remove the file
if os.path.exists(path) == True:
    os.remove(path)

pyperclip.copy(url)

os.system(notifyCommand.replace('%s', 'Copied URL to clipboard: ' + url))
